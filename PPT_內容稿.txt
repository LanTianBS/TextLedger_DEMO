# TextLedger 專案簡報內容

---
## 系統設計理念與目標

### 目標用戶
- 一般大眾、學生、上班族，特別是習慣使用 LINE 的用戶。
- 需要簡單、快速記帳與財務分析的用戶。

### 使用場景
- 用戶可直接在 LINE 聊天視窗輸入文字、語音或上傳圖片（如發票、收據），即時完成記帳。
- 管理員可透過專屬後台進行公告、用戶管理與數據查詢。
- 用戶可隨時查詢歷史交易、財務分析與設定開支目標。

### 核心功能介紹
- 多元輸入記帳：支援文字、語音、圖片辨識自動記帳。
- 智能分類：自動辨識交易類型與分類。
- 月結餘與目標管理：自動計算月結餘，支援開支目標設定。
- 互動式回饋：QuickReply 快速選單、Flex Message 美觀互動訊息。
- 管理員後台：公告管理、用戶管理、意見回饋查詢。
- 數據分析：支出/收入分類統計、月度趨勢圖表。

---
## 製作流程

### 如何製作
1. 需求分析：明確用戶需求與功能規劃。
2. 系統設計：資料庫設計（用戶、交易、分類、目標等模型）。
3. 後端開發：使用 Python（Flask）實作 API 與 LINE Bot webhook。
4. 前端設計：HTML + Jinja2 模板渲染管理後台與用戶頁面。
5. AI 整合：串接 Gemini API 處理自然語言、圖片、語音辨識。
6. 測試與優化：單元測試、功能測試與使用者回饋調整。

### 前端/後端技術
- 後端：Python、Flask、SQLAlchemy、PostgreSQL
- 前端：HTML、Jinja2、Bootstrap
- LINE Bot：line-bot-sdk-v3
- AI服務：Google Gemini API、Google Speech-to-Text
- 其他：dotenv、JWT、ffmpeg（音訊轉檔）

### 生成式AI工具輔助完成的項目
- Gemini API：自動解析用戶輸入的自然語言、圖片、語音內容，結構化為記帳資料。
- AI協助分類、金額比對、細項拆解與提示生成。

### 碰到的挑戰與解決方式
- 多格式資料處理：需處理文字、圖片、語音等多種輸入格式，透過 Gemini API 與 Google Speech-to-Text 統一結構化資料。
- LINE Bot 彈性互動：設計 Flex Message 與 QuickReply，提升用戶體驗。
- 資料一致性與安全：使用 SQLAlchemy 交易機制，並以 JWT 驗證管理員權限。
- Google 憑證格式問題：環境變數中的 GOOGLE_CREDENTIALS_STR 需將 \\n 轉換為 \n，專案中已自動處理。

---
## 參考資料與工具清單

### 文獻/教學參考
- Flask 官方文件：https://flask.palletsprojects.com/
- SQLAlchemy 官方文件：https://docs.sqlalchemy.org/
- LINE Messaging API 官方文件：https://developers.line.biz/en/docs/messaging-api/
- Google Cloud Speech-to-Text：https://cloud.google.com/speech-to-text
- Gemini API 官方說明

### AI平台與套件
- Google Gemini API
- Google Cloud Speech-to-Text
- line-bot-sdk-v3
- python-dotenv
- Flask、SQLAlchemy、Jinja2
- Chart.js
- ffmpeg

---
